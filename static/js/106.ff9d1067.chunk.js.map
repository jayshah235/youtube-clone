{"version":3,"file":"static/js/106.ff9d1067.chunk.js","mappings":"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","sources":["config.js","webpack://youtube-clone/./src/components/custom-video/styles.module.scss?717a","components/custom-video/index.jsx","webpack://youtube-clone/./src/components/videos-grid/styles.module.scss?e611","components/videos-grid/index.jsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/@tanstack/query-core/src/queryObserver.ts","../node_modules/@tanstack/react-query/src/useSyncExternalStore.ts","../node_modules/@tanstack/react-query/src/QueryErrorResetBoundary.tsx","../node_modules/@tanstack/react-query/src/isRestoring.tsx","../node_modules/@tanstack/react-query/src/errorBoundaryUtils.ts","../node_modules/@tanstack/react-query/src/utils.ts","../node_modules/@tanstack/react-query/src/suspense.ts","../node_modules/@tanstack/react-query/src/useQuery.ts","../node_modules/@tanstack/react-query/src/useBaseQuery.ts","utils/cacheHook.js","pages/homepage/homepage-videos.jsx","utils/formatters.js","../node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js","../node_modules/use-sync-external-store/shim/index.js"],"sourcesContent":["export const myConfig = {\r\n  API_ENDPOINT: \"https://youtube.googleapis.com/youtube/v3\",\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"videoContainer\":\"styles_videoContainer__IyVo9\",\"videoImage\":\"styles_videoImage__Ce6KX\",\"videoContent\":\"styles_videoContent__Wst+g\",\"videoDesc\":\"styles_videoDesc__wcIEo\",\"videoResultSection\":\"styles_videoResultSection__vdnTZ\"};","import { Link } from \"react-router-dom\";\r\nimport Image from \"../image-component\";\r\nimport placeholderimage from \"../../assets/placeholdersrc.jpg\";\r\nimport { dateFormatter } from \"../../utils/formatters\";\r\nimport styles from \"./styles.module.scss\";\r\n\r\nexport const CustomVideo = (props) => {\r\n  const { videoImage, title, timePosted, totalViews, link, authorTitle } =\r\n    props;\r\n\r\n  return (\r\n    <Link to={link} className={styles.videoContainer}>\r\n      <figure className={styles.videoImage}>\r\n        <Image\r\n          loadingSrc={placeholderimage}\r\n          src={videoImage}\r\n          placeHolderStyle={{ width: \"100%\" }}\r\n        />\r\n      </figure>\r\n      <div className={styles.videoContent}>\r\n        <Image\r\n          loadingSrc={placeholderimage}\r\n          src={videoImage}\r\n          placeHolderStyle={{ width: \"40px\" }}\r\n        />\r\n        <div className={styles.videoDesc}>\r\n          <h3>\r\n            {title?.length > 58 ? `${title?.substring(0, 58)}...` : title}\r\n          </h3>\r\n          <p>{authorTitle}</p>\r\n          <div className={styles.videoResultSection}>\r\n            {totalViews?.length && <p>{totalViews} Views</p>}\r\n            <p>{dateFormatter(timePosted)}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"videoGrid\":\"styles_videoGrid__FiKBj\",\"videoWrapper\":\"styles_videoWrapper__mxXmM\"};","import { CustomVideo } from \"../custom-video\";\r\nimport styles from \"./styles.module.scss\";\r\nimport { viewsFormatter } from \"../../utils/formatters\";\r\n\r\nconst VideosGrid = ({ data }) => {\r\n  return (\r\n    <div className={styles.videoGrid}>\r\n      {data?.map((items, index) => (\r\n        <section key={index} className={styles.videoWrapper}>\r\n          <CustomVideo\r\n            videoImage={\r\n              items?.snippet?.thumbnails?.maxres?.url ??\r\n              items?.snippet?.thumbnails?.high?.url\r\n            }\r\n            title={items?.snippet?.title}\r\n            timePosted={items?.snippet?.publishedAt}\r\n            totalViews={viewsFormatter(items?.statistics?.viewCount)}\r\n            link={`/youtube-clone/watch/${items?.id?.videoId ?? items?.id}/${items?.snippet.channelTitle}`}\r\n            authorTitle={items?.snippet?.channelTitle}\r\n          />\r\n        </section>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideosGrid;\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}","import {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Action, FetchOptions, Query, QueryState } from './query'\nimport type { QueryClient } from './queryClient'\nimport type { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof options?.isDataEqual !== 'undefined'\n    ) {\n      this.client\n        .getLogger()\n        .error(\n          `The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option`,\n        )\n    }\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result, options)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult everytime\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.currentResult = result\n      this.currentResultOptions = this.options\n      this.currentResultState = this.currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdatedAt &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(prevResult?.data, placeholderData, options) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isLoading = status === 'loading'\n    const isError = status === 'error'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.trackedProps,\n      )\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n) {\n  // it is important to keep this condition like this for three reasons:\n  // 1. It will get removed in the v5\n  // 2. it reads: don't update the properties if we want to keep the previous\n  // data.\n  // 3. The opposite condition (!options.keepPreviousData) would fallthrough\n  // and will result in a bad decision\n  if (options.keepPreviousData) {\n    return false\n  }\n\n  // this means we want to put some placeholder data when pending and queryKey\n  // changed.\n  if (options.placeholderData !== undefined) {\n    // re-assign properties only if current data is placeholder data\n    // which means that data did not arrive yet, so, if there is some cached data\n    // we need to \"prepare\" to receive it\n    return optimisticResult.isPlaceholderData\n  }\n\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n","'use client'\n// Temporary workaround due to an issue with react-native uSES - https://github.com/TanStack/query/pull/3601\nimport { useSyncExternalStore as uSES } from 'use-sync-external-store/shim/index.js'\n\nexport const useSyncExternalStore = uSES\n","'use client'\nimport * as React from 'react'\n\n// CONTEXT\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","'use client'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  UseErrorBoundary,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (options.suspense || options.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  useErrorBoundary,\n  query,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  useErrorBoundary: UseErrorBoundary<\n    TQueryFnData,\n    TError,\n    TQueryData,\n    TQueryKey\n  >\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    shouldThrowError(useErrorBoundary, [result.error, query])\n  )\n}\n","export function shouldThrowError<T extends (...args: any[]) => boolean>(\n  _useErrorBoundary: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow useErrorBoundary function to override throwing behavior on a per-error basis\n  if (typeof _useErrorBoundary === 'function') {\n    return _useErrorBoundary(...params)\n  }\n\n  return !!_useErrorBoundary\n}\n","import type { DefaultedQueryObserverOptions } from '@tanstack/query-core'\nimport type { QueryObserver } from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport type { QueryObserverResult } from '@tanstack/query-core'\nimport type { QueryKey } from '@tanstack/query-core'\n\nexport const ensureStaleTime = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => defaultedOptions?.suspense && willFetch(result, isRestoring)\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer\n    .fetchOptimistic(defaultedOptions)\n    .then(({ data }) => {\n      defaultedOptions.onSuccess?.(data as TData)\n      defaultedOptions.onSettled?.(data, null)\n    })\n    .catch((error) => {\n      errorResetBoundary.clearReset()\n      defaultedOptions.onError?.(error)\n      defaultedOptions.onSettled?.(undefined, error)\n    })\n","'use client'\nimport { QueryObserver, parseQueryArgs } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type { QueryFunction, QueryKey } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n","'use client'\nimport * as React from 'react'\n\nimport { notifyManager } from '@tanstack/query-core'\nimport { useSyncExternalStore } from './useSyncExternalStore'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { ensureStaleTime, fetchOptimistic, shouldSuspend } from './suspense'\nimport type { QueryKey, QueryObserver } from '@tanstack/query-core'\nimport type { UseBaseQueryOptions } from './types'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n) {\n  const queryClient = useQueryClient({ context: options.context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError,\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess,\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled,\n    )\n  }\n\n  ensureStaleTime(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        queryClient,\n        defaultedOptions,\n      ),\n  )\n\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange))\n\n        // Update result to make sure we did not miss any query updates\n        // between creating the observer and subscribing to it.\n        observer.updateResult()\n\n        return unsubscribe\n      },\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result, isRestoring)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      useErrorBoundary: defaultedOptions.useErrorBoundary,\n      query: observer.getCurrentQuery(),\n    })\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n","import { useQuery } from \"@tanstack/react-query\";\r\nimport { myConfig } from \"../config\";\r\n\r\nconst fetchHook = async (url) => {\r\n  const response = await fetch(url);\r\n  const data = response?.json();\r\n  return data;\r\n};\r\n\r\nexport const useCache = (key, apiUrl) => {\r\n  const query = useQuery(\r\n    [key],\r\n    () =>\r\n      fetchHook(\r\n        `${myConfig.API_ENDPOINT}/${apiUrl}&regionCode=IN&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`\r\n      ),\r\n    {\r\n      cacheTime: 500000,\r\n      staleTime: 500000,\r\n    }\r\n  );\r\n\r\n  return query;\r\n};\r\n","import VideosGrid from \"../../components/videos-grid\";\r\nimport { VideosLoader } from \"../../loaders/videos-skeleton\";\r\nimport { useCache } from \"../../utils/cacheHook\";\r\n\r\nconst HomePageVideos = () => {\r\n  const { data, isError, isLoading } = useCache(\r\n    \"homepage\",\r\n    \"videos?part=snippet%2CcontentDetails%2Cstatistics&chart=mostPopular&maxResults=50\"\r\n  );\r\n\r\n  if (isLoading) {\r\n    return <VideosLoader />;\r\n  };\r\n\r\n  if (isError) {\r\n    return 'Something Went Wrong...';\r\n  };\r\n\r\n  return <VideosGrid data={data?.items} />;\r\n};\r\n\r\nexport default HomePageVideos;\r\n","export const viewsFormatter = (num) => {\r\n  if (num >= 1000000000) {\r\n    return (num / 1000000000).toFixed(1).replace(/\\.0$/, \"\") + \"G\";\r\n  }\r\n  if (num >= 1000000) {\r\n    return (num / 1000000).toFixed(1).replace(/\\.0$/, \"\") + \"M\";\r\n  }\r\n  if (num >= 1000) {\r\n    return (num / 1000).toFixed(1).replace(/\\.0$/, \"\") + \"K\";\r\n  }\r\n  return num;\r\n};\r\n\r\nexport const dateFormatter = (dates) => {\r\n  let date = dates;\r\n  const splitDate = date?.split(\"-\");\r\n  const yearAndMonth = splitDate?.slice(0, 2).join(\"/\");\r\n  const getDate = splitDate\r\n    ?.slice(2)\r\n    ?.join(\"\")\r\n    ?.split(\"\")\r\n    .slice(0, 2)\r\n    ?.join(\"\");\r\n  return `${yearAndMonth}/${getDate}`;\r\n};\r\n","/**\n * @license React\n * use-sync-external-store-shim.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var e=require(\"react\");function h(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var k=\"function\"===typeof Object.is?Object.is:h,l=e.useState,m=e.useEffect,n=e.useLayoutEffect,p=e.useDebugValue;function q(a,b){var d=b(),f=l({inst:{value:d,getSnapshot:b}}),c=f[0].inst,g=f[1];n(function(){c.value=d;c.getSnapshot=b;r(c)&&g({inst:c})},[a,d,b]);m(function(){r(c)&&g({inst:c});return a(function(){r(c)&&g({inst:c})})},[a]);p(d);return d}\nfunction r(a){var b=a.getSnapshot;a=a.value;try{var d=b();return!k(a,d)}catch(f){return!0}}function t(a,b){return b()}var u=\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement?t:q;exports.useSyncExternalStore=void 0!==e.useSyncExternalStore?e.useSyncExternalStore:u;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim.production.min.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim.development.js');\n}\n"],"names":["myConfig","API_ENDPOINT","CustomVideo","props","videoImage","title","timePosted","totalViews","link","authorTitle","_jsxs","Link","to","className","styles","children","_jsx","Image","loadingSrc","placeholderimage","src","placeHolderStyle","width","length","concat","substring","dateFormatter","_ref","data","map","items","index","_items$snippet$thumbn","_items$snippet","_items$snippet$thumbn2","_items$snippet$thumbn3","_items$snippet2","_items$snippet2$thumb","_items$snippet2$thumb2","_items$snippet3","_items$snippet4","_items$statistics","_items$id$videoId","_items$id","_items$snippet5","snippet","thumbnails","maxres","url","high","publishedAt","viewsFormatter","statistics","viewCount","id","videoId","channelTitle","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","QueryObserver","_Subscribable","_inherits","_super","_createSuper","client","options","_this","_classCallCheck","trackedProps","Set","selectError","bindMethods","setOptions","_createClass","value","this","remove","bind","refetch","listeners","size","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","hasListeners","destroy","shouldFetchOn","refetchOnReconnect","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","shallowEqualObjects","getQueryCache","notify","type","query","observer","enabled","Error","queryKey","updateQuery","mounted","shouldFetchOptionally","updateResult","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","build","result","createResult","optimisticResult","keepPreviousData","undefined","placeholderData","isPlaceholderData","getCurrentResult","shouldAssignObserverCurrentProperties","currentResult","currentResultOptions","currentResultState","state","_this2","trackedResult","forEach","defineProperty","configurable","enumerable","get","add","arguments","refetchPage","_excluded","fetch","_objectSpread","meta","_this3","defaultedOptions","isFetchingOptimistic","then","fetchOptions","_fetchOptions$cancelR","_this4","cancelRefetch","promise","throwOnError","catch","noop","_this5","isServer","isStale","isValidTimeout","timeout","timeUntilStale","dataUpdatedAt","staleTimeoutId","setTimeout","_this$options$refetch","refetchInterval","nextInterval","_this6","refetchIntervalId","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","clearInterval","prevResult","prevResultState","prevResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","error","errorUpdatedAt","fetchStatus","status","isPreviousData","_optimisticResults","fetchOnMount","fetchOptionally","canFetch","networkMode","isSuccess","select","selectFn","selectResult","replaceData","process","Date","now","isFetching","isLoading","isError","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","_this7","nextResult","defaultNotifyOptions","cache","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","useErrorBoundary","some","typedKey","has","shouldNotifyListeners","action","onSuccess","manual","isCancelledError","onError","_this8","notifyManager","batch","_this$options$onSucce","_this$options","_this$options$onSettl","_this$options2","onSettled","_this$options$onError","_this$options3","_this$options$onSettl2","_this$options4","_ref2","listener","Subscribable","retryOnMount","shouldLoadOnMount","refetchOnMount","field","suspense","isStaleByTime","useSyncExternalStore","useSyncExternalStore$1","createValue","clearReset","isReset","reset","QueryErrorResetBoundaryContext","React","useQueryErrorResetBoundary","IsRestoringContext","useIsRestoring","Provider","errorResetBoundary","useClearResetErrorBoundary","getHasError","_useErrorBoundary","params","apply","_toConsumableArray","ensureStaleTime","shouldSuspend","isRestoring","willFetch","fetchOptimistic","useQuery","arg1","arg2","arg3","Observer","ensurePreventErrorBoundaryRetry","_React$useState","queryClient","_slicedToArray","getOptimisticResult","onStoreChange","unsubscribe","subscribe","batchCalls","trackResult","useBaseQuery","fetchHook","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","sent","json","abrupt","stop","_x","apiUrl","_useCache","cacheTime","VideosLoader","VideosGrid","num","toFixed","replace","dates","_splitDate$slice","_splitDate$slice$join","_splitDate$slice$join2","splitDate","split","yearAndMonth","slice","join","getDate","e","require","k","is","a","b","l","useState","m","useEffect","n","useLayoutEffect","p","useDebugValue","r","getSnapshot","d","f","u","window","document","createElement","inst","c","g","exports","module"],"sourceRoot":""}