{"version":3,"file":"static/js/721.b9a66b4e.chunk.js","mappings":"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","sources":["webpack://youtube-clone/./src/components/custom-video/styles.module.scss?717a","components/custom-video/index.jsx","webpack://youtube-clone/./src/components/videos-grid/styles.module.scss?e611","components/videos-grid/index.jsx","utils/formatters.js","pages/homepage/homepage-videos.jsx","config.js","utils/fetchHook.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"videoContainer\":\"styles_videoContainer__xDF7+\",\"videoImage\":\"styles_videoImage__9+0Nv\",\"videoContent\":\"styles_videoContent__8DN0j\",\"videoDesc\":\"styles_videoDesc__zIXdR\",\"videoResultSection\":\"styles_videoResultSection__dKfkj\"};","import { Link } from \"react-router-dom\";\r\nimport Image from \"../image-component\";\r\nimport placeholderimage from \"../../assets/placeholdersrc.jpg\";\r\nimport styles from \"./styles.module.scss\";\r\n\r\nexport const CustomVideo = (props) => {\r\n  const {\r\n    videoImage,\r\n    title,\r\n    timePosted,\r\n    totalViews,\r\n    link,\r\n    authorTitle,\r\n  } = props;\r\n\r\n  return (\r\n    <Link to={link} className={styles.videoContainer}>\r\n      <figure className={styles.videoImage}>\r\n        <Image\r\n          loadingSrc={placeholderimage}\r\n          src={videoImage}\r\n          placeHolderStyle={{ width: \"100%\" }}\r\n        />\r\n      </figure>\r\n      <div className={styles.videoContent}>\r\n        <Image\r\n          loadingSrc={placeholderimage}\r\n          src={videoImage}\r\n          placeHolderStyle={{ width: \"40px\" }}\r\n        />\r\n        <div className={styles.videoDesc}>\r\n          <h3>\r\n            {title?.length > 58 ? `${title?.substring(0, 58)}...` : title}\r\n          </h3>\r\n          <p>{authorTitle}</p>\r\n            <div className={styles.videoResultSection}>\r\n              {totalViews?.length && (\r\n                <p>{totalViews} Views</p>\r\n              )}\r\n              <p>{timePosted}</p>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"videoGrid\":\"styles_videoGrid__9zFVE\",\"videoWrapper\":\"styles_videoWrapper__pJCQr\"};","import { CustomVideo } from \"../custom-video\";\r\nimport styles from \"./styles.module.scss\";\r\nimport { viewsFormatter } from \"../../utils/formatters\";\r\n\r\nconst VideosGrid = ({ data }) => {\r\n  // const getHours = (date) => {\r\n  //   const currentTimeStamp = new Date().getTime();\r\n  //   const getPostedTimeStamp = new Date(date).getTime();\r\n  //   const milliseconds = Math.abs(currentTimeStamp - getPostedTimeStamp);\r\n  //   if (isNaN(milliseconds)) {\r\n  //     return 0;\r\n  //   } else {\r\n  //     const hours = milliseconds / 36e5;\r\n  //     return Math.floor(hours);\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <div className={styles.videoGrid}>\r\n      {data?.map((items, index) => (\r\n        <section key={index} className={styles.videoWrapper}>\r\n          <CustomVideo\r\n            videoImage={\r\n              items?.snippet?.thumbnails?.maxres?.url ??\r\n              items?.snippet?.thumbnails?.high?.url\r\n            }\r\n            title={items?.snippet?.title}\r\n            timePosted={items?.snippet?.publishedAt}\r\n            totalViews={viewsFormatter(items?.statistics?.viewCount)}\r\n            link={`/youtube-clone/watch/${items?.id?.videoId ?? items?.id}/${items?.snippet.channelTitle}`}\r\n            authorTitle={items?.snippet?.channelTitle}\r\n          />\r\n        </section>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideosGrid;\r\n","export const viewsFormatter = (num) => {\r\n  if (num >= 1000000000) {\r\n    return (num / 1000000000).toFixed(1).replace(/\\.0$/, \"\") + \"G\";\r\n  }\r\n  if (num >= 1000000) {\r\n    return (num / 1000000).toFixed(1).replace(/\\.0$/, \"\") + \"M\";\r\n  }\r\n  if (num >= 1000) {\r\n    return (num / 1000).toFixed(1).replace(/\\.0$/, \"\") + \"K\";\r\n  }\r\n  return num;\r\n};\r\n","import VideosGrid from \"../../components/videos-grid\";\r\nimport { VideosLoader } from \"../../loaders/videos-skeleton\";\r\nimport { CustomFetchHook } from \"../../utils/fetchHook\";\r\n\r\nconst HomePageVideos = () => {\r\n  const { data, loading, error } = CustomFetchHook(\r\n    `videos?part=snippet%2CcontentDetails%2Cstatistics&chart=mostPopular&maxResults=50`,\r\n    true\r\n  );\r\n\r\n  if (loading) {\r\n    return <VideosLoader />;\r\n  }\r\n\r\n  if (error) {\r\n    return error.message;\r\n  }\r\n\r\n  return <VideosGrid data={data} />;\r\n};\r\n\r\nexport default HomePageVideos;\r\n","export const myConfig = {\r\n  API_ENDPOINT: \"https://youtube.googleapis.com/youtube/v3\",\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { myConfig } from \"../config\";\r\n\r\nexport const CustomFetchHook = (url, appendNewData) => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      setLoading(true);\r\n      try {\r\n        const getResponse = await fetch(\r\n          `${myConfig.API_ENDPOINT}/${url}&regionCode=IN&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`\r\n        );\r\n        const response = await getResponse?.json();\r\n        if (response?.error) {\r\n          throw new Error(\"Oops Something Went Wrong....\");\r\n        }\r\n        if (appendNewData) {\r\n          setData((prev) => [...prev, ...response?.items]);\r\n        } else {\r\n          setData(response);\r\n        }\r\n        setLoading(false);\r\n      } catch (err) {\r\n        setLoading(false);\r\n        setError(err);\r\n      }\r\n    })();\r\n  }, [url, appendNewData]);\r\n\r\n  return { data, error, loading };\r\n};\r\n"],"names":["CustomVideo","props","videoImage","title","timePosted","totalViews","link","authorTitle","_jsxs","Link","to","className","styles","children","_jsx","Image","loadingSrc","placeholderimage","src","placeHolderStyle","width","length","concat","substring","_ref","data","map","items","index","_items$snippet$thumbn","_items$snippet","_items$snippet$thumbn2","_items$snippet$thumbn3","_items$snippet2","_items$snippet2$thumb","_items$snippet2$thumb2","_items$snippet3","_items$snippet4","_items$statistics","_items$id$videoId","_items$id","_items$snippet5","num","snippet","thumbnails","maxres","url","high","publishedAt","statistics","viewCount","toFixed","replace","id","videoId","channelTitle","_CustomFetchHook","CustomFetchHook","loading","error","VideosLoader","message","VideosGrid","myConfig","appendNewData","_useState","useState","_useState2","_slicedToArray","setData","_useState3","_useState4","setLoading","_useState5","_useState6","setError","useEffect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","getResponse","response","wrap","_context","prev","next","fetch","process","sent","json","Error","_toConsumableArray","t0","stop"],"sourceRoot":""}